// <auto-generated />
using System;
using System.Collections.Generic;
using Mappa.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace mappa.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250207154128_DateToInt")]
    partial class DateToInt
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Mappa.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<List<string>>("AlternateNames")
                        .HasColumnType("text[]");

                    b.Property<string>("AsciiName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CountryCode")
                        .HasColumnType("text");

                    b.Property<string>("GeoNamesId")
                        .HasColumnType("text");

                    b.Property<int?>("WrittenSourceId")
                        .HasColumnType("integer");

                    b.Property<int?>("WrittenSourceId1")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WrittenSourceId");

                    b.HasIndex("WrittenSourceId1");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Mappa.Entities.Ethnicity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Ethnicities");
                });

            modelBuilder.Entity("Mappa.Entities.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("Mappa.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("Mappa.Entities.IntraOrdinary", b =>
                {
                    b.Property<int>("PersonIdA")
                        .HasColumnType("integer");

                    b.Property<int>("PersonIdB")
                        .HasColumnType("integer");

                    b.HasKey("PersonIdA", "PersonIdB");

                    b.HasIndex("PersonIdB");

                    b.ToTable("IntraOrdinary");
                });

            modelBuilder.Entity("Mappa.Entities.IntraUnordinary", b =>
                {
                    b.Property<int>("PersonIdA")
                        .HasColumnType("integer");

                    b.Property<int>("PersonIdB")
                        .HasColumnType("integer");

                    b.HasKey("PersonIdA", "PersonIdB");

                    b.HasIndex("PersonIdB");

                    b.ToTable("IntraUnordinary");
                });

            modelBuilder.Entity("Mappa.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("SecondarySourceId")
                        .HasColumnType("integer");

                    b.Property<int?>("WrittenSourceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SecondarySourceId");

                    b.HasIndex("WrittenSourceId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Mappa.Entities.OrdinaryPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AlternateName")
                        .HasColumnType("text");

                    b.Property<int?>("BackgroundCityId")
                        .HasColumnType("integer");

                    b.Property<string>("Biography")
                        .HasColumnType("text");

                    b.Property<List<int>>("BirthYear")
                        .HasColumnType("integer[]");

                    b.Property<List<int>>("DeathYear")
                        .HasColumnType("integer[]");

                    b.Property<string>("DepictionInTheSource")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("EthnicityId")
                        .HasColumnType("integer");

                    b.Property<string>("ExplanationOfEthnicity")
                        .HasColumnType("text");

                    b.Property<int?>("GenderId")
                        .HasColumnType("integer");

                    b.Property<string>("InteractionWithOrdinaryExplanation")
                        .HasColumnType("text");

                    b.Property<string>("InteractionWithUnordinaryExplanation")
                        .HasColumnType("text");

                    b.Property<string>("InterestingFeature")
                        .HasColumnType("text");

                    b.Property<int?>("LocationId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ProbableBirthYear")
                        .HasColumnType("integer");

                    b.Property<int?>("ProbableDeathYear")
                        .HasColumnType("integer");

                    b.Property<string>("ProfessionExplanation")
                        .HasColumnType("text");

                    b.Property<int?>("ProfessionId")
                        .HasColumnType("integer");

                    b.Property<string>("ReligionExplanation")
                        .HasColumnType("text");

                    b.Property<int?>("ReligionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BackgroundCityId");

                    b.HasIndex("EthnicityId");

                    b.HasIndex("GenderId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProfessionId");

                    b.HasIndex("ReligionId");

                    b.ToTable("OrdinaryPersons");
                });

            modelBuilder.Entity("Mappa.Entities.Profession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Professions");
                });

            modelBuilder.Entity("Mappa.Entities.Religion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("OrdinaryPersonId")
                        .HasColumnType("integer");

                    b.Property<int?>("UnordinaryPersonId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrdinaryPersonId");

                    b.HasIndex("UnordinaryPersonId");

                    b.ToTable("Religions");
                });

            modelBuilder.Entity("Mappa.Entities.SecondarySource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<List<string>>("AlternateNames")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Author")
                        .HasColumnType("text");

                    b.Property<string>("BibliographyInformation")
                        .HasColumnType("text");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<string>("OtherInformation")
                        .HasColumnType("text");

                    b.Property<string>("Topic")
                        .HasColumnType("text");

                    b.Property<int?>("TypeId")
                        .HasColumnType("integer");

                    b.Property<string>("University")
                        .HasColumnType("text");

                    b.Property<int?>("YearWritten")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("TypeId");

                    b.ToTable("SecondarySources");
                });

            modelBuilder.Entity("Mappa.Entities.Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("Mappa.Entities.UnordinaryPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AlternateName")
                        .HasColumnType("text");

                    b.Property<int?>("BirthPlaceId")
                        .HasColumnType("integer");

                    b.Property<List<int>>("BirthYear")
                        .HasColumnType("integer[]");

                    b.Property<int?>("DeathPlaceId")
                        .HasColumnType("integer");

                    b.Property<List<int>>("DeathYear")
                        .HasColumnType("integer[]");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("EthnicityId")
                        .HasColumnType("integer");

                    b.Property<int?>("GenderId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ProbableBirthYear")
                        .HasColumnType("integer");

                    b.Property<int?>("ProbableDeathYear")
                        .HasColumnType("integer");

                    b.Property<int?>("ProfessionId")
                        .HasColumnType("integer");

                    b.Property<int?>("ReligionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BirthPlaceId");

                    b.HasIndex("DeathPlaceId");

                    b.HasIndex("EthnicityId");

                    b.HasIndex("GenderId");

                    b.HasIndex("ProfessionId");

                    b.HasIndex("ReligionId");

                    b.ToTable("UnordinaryPersons");
                });

            modelBuilder.Entity("Mappa.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Mappa.Entities.WrittenSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<List<string>>("AlternateNames")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Author")
                        .HasColumnType("text");

                    b.Property<int?>("GenreId")
                        .HasColumnType("integer");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<List<string>>("KnownCopies")
                        .HasColumnType("text[]");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<string>("LibraryInformation")
                        .HasColumnType("text");

                    b.Property<int?>("OrdinaryPersonId")
                        .HasColumnType("integer");

                    b.Property<string>("OtherInformation")
                        .HasColumnType("text");

                    b.Property<string>("RemarkableWorksOnTheBook")
                        .HasColumnType("text");

                    b.Property<List<string>>("SurvivedCopies")
                        .HasColumnType("text[]");

                    b.Property<int?>("UnordinaryPersonId")
                        .HasColumnType("integer");

                    b.Property<List<int>>("YearWritten")
                        .HasColumnType("integer[]");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("OrdinaryPersonId");

                    b.HasIndex("UnordinaryPersonId");

                    b.ToTable("WrittenSources");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OrdinaryPersonUnordinaryPerson", b =>
                {
                    b.Property<int>("InteractionsWithOrdinaryId")
                        .HasColumnType("integer");

                    b.Property<int>("InteractionsWithUnordinaryId")
                        .HasColumnType("integer");

                    b.HasKey("InteractionsWithOrdinaryId", "InteractionsWithUnordinaryId");

                    b.HasIndex("InteractionsWithUnordinaryId");

                    b.ToTable("OrdinaryPersonUnordinaryPerson");
                });

            modelBuilder.Entity("Mappa.Entities.City", b =>
                {
                    b.HasOne("Mappa.Entities.WrittenSource", null)
                        .WithMany("CitiesMentioningTheSources")
                        .HasForeignKey("WrittenSourceId");

                    b.HasOne("Mappa.Entities.WrittenSource", null)
                        .WithMany("CitiesWhereSourcesAreWritten")
                        .HasForeignKey("WrittenSourceId1");
                });

            modelBuilder.Entity("Mappa.Entities.IntraOrdinary", b =>
                {
                    b.HasOne("Mappa.Entities.OrdinaryPerson", null)
                        .WithMany()
                        .HasForeignKey("PersonIdA")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mappa.Entities.OrdinaryPerson", null)
                        .WithMany()
                        .HasForeignKey("PersonIdB")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mappa.Entities.IntraUnordinary", b =>
                {
                    b.HasOne("Mappa.Entities.UnordinaryPerson", null)
                        .WithMany()
                        .HasForeignKey("PersonIdA")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mappa.Entities.UnordinaryPerson", null)
                        .WithMany()
                        .HasForeignKey("PersonIdB")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mappa.Entities.Language", b =>
                {
                    b.HasOne("Mappa.Entities.SecondarySource", null)
                        .WithMany("TranslatedLanguages")
                        .HasForeignKey("SecondarySourceId");

                    b.HasOne("Mappa.Entities.WrittenSource", null)
                        .WithMany("TranslatedLanguages")
                        .HasForeignKey("WrittenSourceId");
                });

            modelBuilder.Entity("Mappa.Entities.OrdinaryPerson", b =>
                {
                    b.HasOne("Mappa.Entities.City", "BackgroundCity")
                        .WithMany()
                        .HasForeignKey("BackgroundCityId");

                    b.HasOne("Mappa.Entities.Ethnicity", "Ethnicity")
                        .WithMany()
                        .HasForeignKey("EthnicityId");

                    b.HasOne("Mappa.Entities.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId");

                    b.HasOne("Mappa.Entities.City", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("Mappa.Entities.Profession", "Profession")
                        .WithMany()
                        .HasForeignKey("ProfessionId");

                    b.HasOne("Mappa.Entities.Religion", "Religion")
                        .WithMany()
                        .HasForeignKey("ReligionId");

                    b.Navigation("BackgroundCity");

                    b.Navigation("Ethnicity");

                    b.Navigation("Gender");

                    b.Navigation("Location");

                    b.Navigation("Profession");

                    b.Navigation("Religion");
                });

            modelBuilder.Entity("Mappa.Entities.Religion", b =>
                {
                    b.HasOne("Mappa.Entities.OrdinaryPerson", null)
                        .WithMany("FormerReligion")
                        .HasForeignKey("OrdinaryPersonId");

                    b.HasOne("Mappa.Entities.UnordinaryPerson", null)
                        .WithMany("FormerReligion")
                        .HasForeignKey("UnordinaryPersonId");
                });

            modelBuilder.Entity("Mappa.Entities.SecondarySource", b =>
                {
                    b.HasOne("Mappa.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("Mappa.Entities.Type", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");

                    b.Navigation("Language");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Mappa.Entities.UnordinaryPerson", b =>
                {
                    b.HasOne("Mappa.Entities.City", "BirthPlace")
                        .WithMany()
                        .HasForeignKey("BirthPlaceId");

                    b.HasOne("Mappa.Entities.City", "DeathPlace")
                        .WithMany()
                        .HasForeignKey("DeathPlaceId");

                    b.HasOne("Mappa.Entities.Ethnicity", "Ethnicity")
                        .WithMany()
                        .HasForeignKey("EthnicityId");

                    b.HasOne("Mappa.Entities.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId");

                    b.HasOne("Mappa.Entities.Profession", "Profession")
                        .WithMany()
                        .HasForeignKey("ProfessionId");

                    b.HasOne("Mappa.Entities.Religion", "Religion")
                        .WithMany()
                        .HasForeignKey("ReligionId");

                    b.Navigation("BirthPlace");

                    b.Navigation("DeathPlace");

                    b.Navigation("Ethnicity");

                    b.Navigation("Gender");

                    b.Navigation("Profession");

                    b.Navigation("Religion");
                });

            modelBuilder.Entity("Mappa.Entities.WrittenSource", b =>
                {
                    b.HasOne("Mappa.Entities.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId");

                    b.HasOne("Mappa.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("Mappa.Entities.OrdinaryPerson", null)
                        .WithMany("Sources")
                        .HasForeignKey("OrdinaryPersonId");

                    b.HasOne("Mappa.Entities.UnordinaryPerson", null)
                        .WithMany("Sources")
                        .HasForeignKey("UnordinaryPersonId");

                    b.Navigation("Genre");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Mappa.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Mappa.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mappa.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Mappa.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrdinaryPersonUnordinaryPerson", b =>
                {
                    b.HasOne("Mappa.Entities.OrdinaryPerson", null)
                        .WithMany()
                        .HasForeignKey("InteractionsWithOrdinaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mappa.Entities.UnordinaryPerson", null)
                        .WithMany()
                        .HasForeignKey("InteractionsWithUnordinaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mappa.Entities.OrdinaryPerson", b =>
                {
                    b.Navigation("FormerReligion");

                    b.Navigation("Sources");
                });

            modelBuilder.Entity("Mappa.Entities.SecondarySource", b =>
                {
                    b.Navigation("TranslatedLanguages");
                });

            modelBuilder.Entity("Mappa.Entities.UnordinaryPerson", b =>
                {
                    b.Navigation("FormerReligion");

                    b.Navigation("Sources");
                });

            modelBuilder.Entity("Mappa.Entities.WrittenSource", b =>
                {
                    b.Navigation("CitiesMentioningTheSources");

                    b.Navigation("CitiesWhereSourcesAreWritten");

                    b.Navigation("TranslatedLanguages");
                });
#pragma warning restore 612, 618
        }
    }
}
